unit uListaCliente;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Data.DB, Vcl.Grids, Vcl.DBGrids,
  Vcl.ExtCtrls, Vcl.StdCtrls, Vcl.Buttons,
  dbWeb, ComObj, XMLDoc, XMLIntf;

type
  TfrmListaCliente = class(TForm)
    pnlBotao: TPanel;
    dbgListaCliente: TDBGrid;
    bntNovo: TBitBtn;
    btnEditar: TBitBtn;
    btnDeletar: TBitBtn;
    BitBtn3: TBitBtn;
    pnelFiltro: TPanel;
    Label1: TLabel;
    edtFiltro: TEdit;
    btnEmail: TBitBtn;
    btnXML: TBitBtn;
    procedure dbgListaClienteDrawColumnCell(Sender: TObject; const Rect: TRect;
      DataCol: Integer; Column: TColumn; State: TGridDrawState);
    procedure BitBtn3Click(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure bntNovoClick(Sender: TObject);
    procedure btnEditarClick(Sender: TObject);
    procedure btnDeletarClick(Sender: TObject);
    procedure edtFiltroChange(Sender: TObject);
    procedure btnEmailClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  frmListaCliente: TfrmListaCliente;

implementation

{$R *.dfm}

uses uCadCliente, uDM, uFunc;

procedure TfrmListaCliente.BitBtn3Click(Sender: TObject);
begin
  Close;
end;

procedure TfrmListaCliente.bntNovoClick(Sender: TObject);
begin
  DM.cdsCliente.Append;
  AbrirForm(TfrmCadCliente, frmCadCliente);
  AjustarGrid(dbgListaCliente);
end;

procedure TfrmListaCliente.btnDeletarClick(Sender: TObject);
begin
  if Perguntar('Confirma a exclusão?') then
  begin
    DM.cdsCliente.Delete;
    AjustarGrid(dbgListaCliente);
  end;
end;

procedure TfrmListaCliente.btnEditarClick(Sender: TObject);
begin
  DM.cdsCliente.Edit;
  AbrirForm(TfrmCadCliente, frmCadCliente);
  AjustarGrid(dbgListaCliente);
end;

procedure TfrmListaCliente.btnEmailClick(Sender: TObject);
var
  sl: TStringList;
  dp: TDataSetTableProducer;
begin
  if DM.cdsCliente.RecordCount = 0 then
  begin
    Alerta('Efetue um cadastro de cliente');
    exit;
  end;

  ArqXML := SalvarArquivoXML(DM.cdsCliente, 'Clientes', 'Cliente', dbeCpf.Field.Text + '.xml');

  //Montando o HTML com o conteúdo do e-mail
  sEmail := TStringList.Create;
  sEmail.Append('<html><head><meta content=''text/html; charset=iso-8859-1'' http-equiv=''Content-Type'' />');
  sEmail.Append('<title>Cadastro efetivado com sucesso</title> </head>');
  sEmail.Append('<body bgcolor=''#FFFFFF''>');
  sEmail.Append('<p>Prezado cliente, seu cadastro foi realizado com sucesso. Segue abaixo os seus dados e o arquivo XML correspondente:');
  sEmail.Append('<br>');
  sEmail.Append('<p><b> Nome: </b>' + DM.cdsClienteNome.AsString);
  sEmail.Append('<p><b> Cpf: </b>' + FormatMaskText('999.999.999-99;0;_', DM.cdsClienteCpf.AsString));
  sEmail.Append('<p><b> Identidade: </b>' + DM.cdsClienteIdentidade.AsString);
  sEmail.Append('<p><b> Telefone: </b>' + FormatMaskText('(99)99999-9999;0;_', DM.cdsClienteTelefone.AsString));
  sEmail.Append('<p><b> E-mail: </b>' + DM.cdsClienteEmail.AsString);
  sEmail.Append('<p><b> Cep: </b>' + FormatMaskText('99.999-999;0;_', DM.cdsClienteCep.AsString));
  sEmail.Append('<p><b> Logradouro: </b>' + DM.cdsClienteLogradouro.AsString);
  sEmail.Append('<p><b> Número: </b>' + DM.cdsClienteNumero.AsString);
  sEmail.Append('<p><b> Complemento: </b>' + DM.cdsClienteComplemento.AsString);
  sEmail.Append('<p><b> Bairro: </b>' + DM.cdsClienteBairro.AsString);
  sEmail.Append('<p><b> Cidade: </b>' + DM.cdsClienteCidade.AsString);
  sEmail.Append('<p><b> Estado: </b>' + DM.cdsClienteEstado.AsString);
  sEmail.Append('<p><b> País: </b>' + DM.cdsClientePais.AsString);
  sEmail.Append('<p>Este email foi gerado automaticamente pelo sistema. N&atilde;o responda esta mensagem.</p>');
  sEmail.Append('</body></html>');

  //Enviando e-mail com os dados cadastrais
  EnviarEmail('Confirmação de Cadastro', DM.cdsClienteEmail.AsString, ExtractFileDir(ParamStr(0)) + '\' + dbeCpf.Field.Text + '.xml', sEmail);
  Screen.Cursor := crDefault;

end;

procedure TfrmListaCliente.dbgListaClienteDrawColumnCell(Sender: TObject;
  const Rect: TRect; DataCol: Integer; Column: TColumn; State: TGridDrawState);
begin
  ZebrarGrid(Sender,(Sender as TDBGrid).DataSource.DataSet,Rect,Column,State);
end;

procedure TfrmListaCliente.FormShow(Sender: TObject);
begin
  AjustarGrid(dbgListaCliente);
end;

procedure TfrmListaCliente.edtFiltroChange(Sender: TObject);
begin
  DM.cdsCliente.Filtered := False;
  DM.cdsCliente.Filter   := 'Nome like '+QuotedStr(edtFiltro.Text+'%');
  DM.cdsCliente.Filtered := edtFiltro.Text <> '';
end;

end.
